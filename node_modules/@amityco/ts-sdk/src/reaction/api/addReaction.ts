import { getActiveClient } from '~/client/api';

import { upsertInCache, pullFromCache } from '~/cache/api';

import { dispatchReactable, fetchReference } from '../utils';

/**
 * ```js
 * import { addReaction } from '@amityco/ts-sdk'
 * const success = await addReaction('post', postId, 'like')
 * ```
 *
 * Creates an {@link Amity.Reaction}
 *
 * @param referenceType The type of thing to add a {@link Amity.Reaction} to, such as a post or a comment.
 * @param referenceId The ID of the thing to add a new {@link Amity.Reaction} to.
 * @param reactionName Reaction name, such as a `like` or `love`.
 * @returns The added result.
 *
 * @category Reaction API
 * @async
 * */
export const addReaction = async (
  referenceType: Amity.Reaction['referenceType'],
  referenceId: Amity.Reaction['referenceId'],
  reactionName: Amity.Reaction['reactionName'],
): Promise<boolean> => {
  const client = getActiveClient();
  client.log('reaction/createReaction', {
    referenceId,
    referenceType,
    reactionName,
  });

  await client.http.post<{ addedId: 'string' }>('/api/v2/reactions', {
    referenceId,
    referenceType,
    reactionName,
  });

  return true;
};

/**
 * ```js
 * import { addReaction } from '@amityco/ts-sdk'
 * const success = addReaction.optimistically('post', postId, 'like')
 * ```
 *
 * Creates an {@link Amity.Reaction} optimistically
 *
 * @param referenceType The type of thing to add a {@link Amity.Reaction} to, such as a post or a comment.
 * @param referenceId The ID of the thing to add a new {@link Amity.Reaction} to.
 * @param reactionName Reaction name, such as a `like` or `love`.
 * @returns The added result.
 *
 * @category Reaction API
 * */
addReaction.optimistically = (
  referenceType: Amity.ReactableType,
  referenceId: Amity.Reaction['referenceId'],
  reactionName: Amity.Reaction['reactionName'],
): boolean | undefined => {
  const client = getActiveClient();
  client.log('reaction/createReaction.optimistically', {
    referenceId,
    referenceType,
    reactionName,
  });

  if (!client.cache) return;

  const model = pullFromCache<Amity.Model[Amity.ReactableType]>([
    referenceType,
    'get',
    referenceId,
  ]);

  if (!model?.data || model.data.myReactions?.includes(reactionName)) return;

  const reaction = {
    ...model.data,
    reactionsCount: model.data.reactionsCount + 1,
    myReactions: [...(model.data.myReactions ?? []), reactionName],
    reactions: {
      ...model.data.reactions,
      [reactionName]: (model.data.reactions[reactionName] ?? 0) + 1,
    },
  } as Amity.Model[Amity.ReactableType];

  upsertInCache([referenceType, 'get', referenceId], reaction, { cachedAt: -1 });

  dispatchReactable(referenceType, reaction);

  return reaction?.myReactions?.includes(reactionName) ?? false;
};
