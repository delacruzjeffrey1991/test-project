import { createHttpTransport, stringify } from '../http';

describe('core/transports', () => {
  describe('stringify', () => {
    test('should serializer simple string', () => {
      const params = { a: 'c' };
      const url = stringify(params);
      expect(url).toBe('a=c');
    });

    test('should serializer empty string', () => {
      const params = { a: '' };
      const url = stringify(params);
      expect(url).toBe('a=');
    });

    test('should serializer special character', () => {
      const params = { a: '✓', b: 'ø' };
      const url = stringify(params);
      expect(url).toBe('a=%E2%9C%93&b=%C3%B8');
    });

    test('should serializer boolean', () => {
      const params = { a: true, b: false };
      const url = stringify(params);
      expect(url).toBe('a=true&b=false');
    });

    test('should serializer null ', () => {
      const params = { a: null };
      const url = stringify(params);
      expect(url).toBe('a=');
    });

    test('should serializer undefined', () => {
      const params = { a: undefined };
      const url = stringify(params);
      expect(url).toBe('');
    });

    test('should serializer NaN', () => {
      const params = { a: NaN };
      const url = stringify(params);
      expect(url).toBe('a=NaN');
    });

    test('should serializer simple array', () => {
      const params = { a: ['b', 'c', 'd'] };
      const url = stringify(params);
      expect(url).toBe('a%5B%5D=b&a%5B%5D=c&a%5B%5D=d');
    });

    test('should serializer complex array', () => {
      const params = { a: ['b', { c: 'd' }] };
      const url = stringify(params);
      expect(url).toBe('a%5B%5D=b&a%5B%5D%5Bc%5D=d');
    });

    test('should serializer nested object', () => {
      const params = { a: { b: 'c' } };
      const url = stringify(params);
      expect(url).toBe('a%5Bb%5D=c');
    });

    test('should serializer deep nested object', () => {
      const params = { a: { b: { c: { d: { e: { f: { g: { h: { i: 'j' } } } } } } } } };
      const url = stringify(params);
      expect(url).toBe('a%5Bb%5D%5Bc%5D%5Bd%5D%5Be%5D%5Bf%5D%5Bg%5D%5Bh%5D%5Bi%5D=j');
    });

    test('should serializer empty object', () => {
      const params = { a: { b: [] } };
      const url = stringify(params);
      expect(url).toBe('');
    });
  });

  describe('createHttpTransport', () => {
    test('should create axios instance with out error', () => {
      expect(createHttpTransport('/')).not.toThrow();
    });
  });
});
