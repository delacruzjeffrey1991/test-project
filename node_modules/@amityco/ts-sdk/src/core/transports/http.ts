import axios from 'axios';
import qs from 'qs';
import HttpAgent, { HttpsAgent } from 'agentkeepalive';

import { unwrapPayload } from './utils';

/**
 * Axios param serializer (for querystring)
 * @hidden
 */
export const stringify = (params: Record<string, unknown>): string => {
  return qs.stringify(params, { arrayFormat: 'brackets' });
};

/**
 * Creates a pre-configured axios instance
 *
 * @param endpoint The ASC rest api server's URL
 * @returns A pre-configured axios instance
 *
 * @category Transport
 * @hidden
 */
export const createHttpTransport = (endpoint: string) => {
  const options = {
    maxSockets: 100,
    maxFreeSockets: 10,
    timeout: 60000,
    freeSocketTimeout: 30000,
  };

  const instance = axios.create({
    baseURL: endpoint,
    httpAgent: new HttpAgent(options),
    httpsAgent: new HttpsAgent(options),
    paramsSerializer: stringify,
  });

  instance.interceptors.response.use(
    response => response,
    error => {
      const { response } = error;
      // eslint-disable-next-line no-console
      console.error(response?.data ?? error);

      if (response) unwrapPayload(response.data);
    },
  );

  return instance;
};
