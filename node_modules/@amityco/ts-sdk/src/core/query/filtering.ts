import { getResolver } from '~/core/model';
import { pullFromCache } from '~/cache/api';
// Note:
// this file should contain a suite of filtering utilities to help the
// local version of the query functions.

/**
 * Filter a given collection with strict equality against a param
 *
 * @param collection the collection to filter
 * @param key the key of the collection's items to challenge
 * @param value the expected value
 * @returns a filtered collection with items only matching the criteria
 *
 * @hidden
 */
export const filterByPropEquality = <T = Record<string, unknown>>(
  collection: T[],
  key: keyof T,
  value: any,
) => (value !== undefined ? collection.filter(item => item[key] === value) : collection);

export const filterByPropInclusion = <T = Record<string, unknown>>(
  collection: T[],
  key: keyof T,
  value: any[] | undefined,
) => (value !== undefined ? collection.filter(item => value.includes(item[key])) : collection);

/**
 * Filter a channel collection by membership of the userId
 *
 * @param collection the channel collection to filter
 * @param membership the membership to be filtered by
 * @param userId user id to be filtered by
 * @returns a filtered collection with items only matching the criteria
 *
 * @hidden
 */
export const filterByChannelMembership = (
  collection: Amity.Channel[],
  membership: Amity.ChannelLiveCollection['membership'],
  userId: Amity.Membership<'channel'>['userId'],
): Amity.Channel[] => {
  if (membership === 'all') {
    return collection;
  }

  return collection.filter(c => {
    // get resolver for the channel by user
    const channelUserCacheKey = getResolver('channelUsers')({
      channelId: c.channelId,
      userId,
    });

    const channelUser = pullFromCache<Amity.Membership<'channel'>>([
      'channelUsers',
      'get',
      channelUserCacheKey,
    ])?.data;

    // if channel user is defined for user, user is a member
    if (membership === 'member' && channelUser) {
      return true;
    }

    // if channel user by user id not found, user is not a member of that
    // channel
    if (membership === 'notMember' && !channelUser) {
      return true;
    }

    return false;
  });
};
