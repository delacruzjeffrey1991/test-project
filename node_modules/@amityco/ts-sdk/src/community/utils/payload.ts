import { CommunityPostSettingMaps, DefaultCommunityPostSetting } from '~/@types';

const getMatchPostSetting = (value: {
  needApprovalOnPostCreation: Amity.RawCommunity['needApprovalOnPostCreation'];
  onlyAdminCanPost: Amity.RawCommunity['onlyAdminCanPost'];
}): Amity.Community['postSetting'] =>
  Object.keys(CommunityPostSettingMaps).find(
    key =>
      value.needApprovalOnPostCreation ===
        CommunityPostSettingMaps[key].needApprovalOnPostCreation &&
      value.onlyAdminCanPost === CommunityPostSettingMaps[key].onlyAdminCanPost,
  ) ?? DefaultCommunityPostSetting;

/*
 * Unpack community payload by mapping payload field to postSetting value.
 */
export const unpackCommunityPayload = <T extends Amity.CommunityPayload>({
  communities,
  ...restPayload
}: T) => ({
  communities: communities.map<Amity.Community>(
    ({ needApprovalOnPostCreation, onlyAdminCanPost, ...restCommunityPayload }) => ({
      postSetting: getMatchPostSetting({
        needApprovalOnPostCreation,
        onlyAdminCanPost,
      }),
      ...restCommunityPayload,
    }),
  ),
  ...restPayload,
});

/*
 * Repack community payload by mapping postSetting to the actual value.
 */
export const packCommunityPayload = <
  T extends { postSetting?: Amity.Community['postSetting']; [k: string]: any },
>({
  postSetting = undefined,
  ...restParam
}: T) => ({
  ...restParam,
  ...(postSetting ? CommunityPostSettingMaps[postSetting] : undefined),
});
