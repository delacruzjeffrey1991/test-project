import { getActiveClient } from '~/client/api';
import { ingestInCache } from '~/cache/api/ingestInCache';
import { createEventSubscriber } from '~/core/events';
import { pullFromCache } from '~/cache/api';
import { getResolver } from '~/core/model';

import { unpackCommunityPayload } from '../utils';

export const createCommunityEventSubscriber = (
  event: keyof Amity.MqttCommunityMessageEvents,
  callback: Amity.Listener<Amity.Community>,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.CommunityPayload) => {
    const unpackedPayload = unpackCommunityPayload(payload);

    if (!client.cache) {
      // TODO: here we are missing specific properties here!
      callback(unpackedPayload.communities[0]);
    } else {
      ingestInCache(unpackedPayload);

      const community = pullFromCache<Amity.Community>([
        'community',
        'get',
        unpackedPayload.communities[0].communityId,
      ])!;

      callback(community.data);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};

function hasPermission(
  member: Amity.Membership<'community'>,
  payload: Amity.CommunityMembershipPayload,
  permission: string,
) {
  if (member.permissions.some(x => x === permission)) {
    return true;
  }

  return payload
    .users!.find(user => user.userId === member.userId)!
    .permissions.some(x => x === permission);
}

function getEventRelatedMember(
  event: keyof Amity.MqttCommunityUserMessageEvents,
  payload: Amity.CommunityMembershipPayload,
) {
  if (event === 'community.joined' || event === 'community.left') {
    return payload.communityUsers![0];
  }

  // NOTE: backend returns the one who took the action and the one on whom
  // the action was taken. We need the 2nd one
  if (event === 'community.userRemoved') {
    return payload.communityUsers!.filter(x => x.communityMembership === 'none')[0];
  }

  if (event === 'community.userBanned') {
    return payload.communityUsers!.filter(x => x.communityMembership === 'banned')[0];
  }

  // NOTE: it might be that in certain edge cases permission check won't be enough
  if (event === 'community.userUnbanned') {
    return payload.communityUsers!.filter(x => !hasPermission(x, payload, 'BAN_COMMUNITY_USER'))[0];
  }

  return payload.communityUsers!.filter(x => !hasPermission(x, payload, 'ADD_COMMUNITY_USER'))[0];
}

export const createCommunityMemberEventSubscriber = (
  event: keyof Amity.MqttCommunityUserMessageEvents,
  callback: (community: Amity.Community, member: Amity.Membership<'community'>) => void,
) => {
  const client = getActiveClient();

  const filter = (payload: Amity.CommunityMembershipPayload) => {
    const unpackedPayload = unpackCommunityPayload(payload);

    if (!client.cache) {
      // TODO: here we are missing specific properties here!
      callback(unpackedPayload.communities[0], getEventRelatedMember(event, unpackedPayload));
    } else {
      ingestInCache(unpackedPayload);

      const community = pullFromCache<Amity.Community>([
        'community',
        'get',
        unpackedPayload.communities[0].communityId,
      ])!;
      const member = pullFromCache<Amity.Membership<'community'>>([
        'communityUsers',
        'get',
        getResolver('communityUsers')(getEventRelatedMember(event, unpackedPayload)),
      ])!;

      callback(community.data, member.data);
    }
  };

  return createEventSubscriber(client, event, event, filter);
};
