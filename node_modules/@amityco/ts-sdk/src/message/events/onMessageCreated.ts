import { getActiveClient } from '~/client/api';
import { createEventSubscriber } from '~/core/events';

import { ingestInCache } from '~/cache/api/ingestInCache';

/**
 * ```js
 * import { onMessageCreated } from '@amityco/ts-sdk'
 * const dispose = onMessageCreated(message => {
 *   // ...
 * })
 * ```
 *
 * Fired when an {@link Amity.Message} has been created
 *
 * @param callback The function to call when the event was fired
 * @returns an {@link Amity.Unsubscriber} function to stop listening
 *
 * @category Message Events
 */
export const onMessageCreated = (callback: Amity.Listener<Amity.Message>): Amity.Unsubscriber => {
  const client = getActiveClient();

  const filter = (payload: Amity.MessagePayload) => {
    ingestInCache(payload);
    callback(payload.messages[0]);
  };

  return createEventSubscriber(client, 'message/onMessageCreated', 'v3.message.didCreate', filter);
};
