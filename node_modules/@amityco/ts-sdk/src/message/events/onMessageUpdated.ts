import { getActiveClient } from '~/client/api';
import { createEventSubscriber } from '~/core/events';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { prepareMessagePayloadForCache } from '~/reaction/utils';

/**
 * ```js
 * import { onMessageUpdated } from '@amityco/ts-sdk'
 * const dispose = onMessageUpdated(message => {
 *   // ...
 * })
 * ```
 *
 * Fired when an {@link Amity.Message} has been updated
 *
 * @param callback The function to call when the event was fired
 * @returns an {@link Amity.Unsubscriber} function to stop listening
 *
 * @category Message Events
 */
export const onMessageUpdated = (callback: Amity.Listener<Amity.Message>): Amity.Unsubscriber => {
  const client = getActiveClient();

  const filter = (payload: Amity.MessagePayload) => {
    ingestInCache(payload);
    const message = payload.messages[0];

    // if payload does not have myReactions
    if (!message?.myReactions) {
      prepareMessagePayloadForCache(message);
    }

    callback(message);
  };

  return createEventSubscriber(client, 'message/onMessageUpdated', 'v3.message.didUpdate', filter);
};
