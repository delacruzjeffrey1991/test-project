import { getActiveClient } from '~/client/api';

import { fireEvent } from '~/core/events';
import { pullFromCache } from '~/cache/api';
import { ingestInCache } from '~/cache/api/ingestInCache';

/**
 * ```js
 * import { getMessages } from '@amityco/ts-sdk'
 * const messages = await getMessages(['foo', 'bar'])
 * ```
 *
 * Fetches a collection of {@link Amity.Message} objects
 *
 * @param messageIds the IDs of the {@link Amity.Message} to fetch
 * @returns the associated collection of {@link Amity.Message} objects
 *
 * @category Message API
 * @async
 */
export const getMessages = async (
  messageIds: Amity.Message['messageId'][],
): Promise<Amity.Cached<Amity.Message[]>> => {
  const client = getActiveClient();
  client.log('message/getMessages', messageIds);

  // API-FIX: endpoint should not be /list, parameters should be querystring.
  const { data } = await client.http.get<Amity.MessagePayload>(`/api/v3/messages/list`, {
    params: { messageIds },
  });

  const cachedAt = client.cache && Date.now();
  if (client.cache) ingestInCache(data, { cachedAt });

  const { messages } = data;

  fireEvent('v3.message.didFetch', { messages });

  return {
    data: messages,
    cachedAt,
  };
};

/**
 * ```js
 * import { getMessages } from '@amityco/ts-sdk'
 * const messages = getMessages.locally(['foo', 'bar']) ?? []
 * ```
 *
 * Fetches a collection of {@link Amity.Message} objects from cache
 *
 * @param messageIds the IDs of the {@link Amity.Message} to fetch
 * @returns the associated collection of {@link Amity.Message} objects
 *
 * @category Message API
 */
getMessages.locally = (
  messageIds: Amity.Message['messageId'][],
): Amity.Cached<Amity.Message[]> | undefined => {
  const client = getActiveClient();
  client.log('message/getMessages.locally', messageIds);

  if (!client.cache) return;

  const cached = messageIds
    .map(messageId => pullFromCache<Amity.Message>(['message', 'get', messageId])!)
    .filter(Boolean);

  const messages = cached.map(({ data }) => data);
  const oldest = cached.sort((a, b) => (a.cachedAt! < b.cachedAt! ? -1 : 1))?.[0];

  if (cached?.length < messageIds.length) return;

  return {
    data: messages,
    cachedAt: oldest.cachedAt,
  };
};
