export {};

declare global {
  namespace Amity {
    type Payloads = {
      user: Amity.UserPayload;
      file: Amity.FilePayload;
      role: Amity.RolePayload;
      channel: Amity.ChannelPayload;
      channelUser: Amity.ChannelMembershipPayload;
      message: Amity.MessagePayload;
      community: Amity.CommunityPayload;
      category: Amity.CategoryPayload;
      communityUser: Amity.CommunityMembershipPayload;
      post: Amity.PostPayload;
      comment: Amity.CommentPayload;
      poll: Amity.PollPayload;
      stream: Amity.StreamPayload;
      reaction: Amity.ReactionPayload;
    };

    type UserPayload = {
      users: Amity.User[];
      files: Amity.File<'image'>[];
    };

    type FeedSettingPayload = {
      feedSettings: {
        contentSettings: Amity.ContentSetting[];
        feedType: Amity.ContentFeedType;
      }[];
    };

    // API-FIX: backend should return a payload like { files: Amity.File<T>[] }
    type CreateFilePayload<T extends Amity.FileType = any> = Amity.File<T>[];
    type FilePayload<T extends Amity.FileType = any> = Amity.File<T>;

    type RolePayload = {
      roles: Amity.Role[];
    };

    type ChannelPayload<
      T extends Amity.ChannelType = any,
      U extends Amity.Channel<T> | Amity.ChannelRaw<T> = Amity.ChannelRaw<T>,
    > = {
      channels: U[];
      channelUsers: Amity.Membership<'channel'>[];
    } & Amity.UserPayload;

    type ChannelMembershipPayload = {
      channels: Amity.ChannelRaw[];
      channelUsers: Amity.Membership<'channel'>[];
    } & Amity.UserPayload;

    type MessagePayload<T extends Amity.MessageContentType = any> = {
      messages: Amity.Message<T>[];
      users?: Amity.User[];
      files?: Amity.File[];
    };

    type StreamPayload = {
      videoStreamings: Amity.Stream[];
      users?: Amity.User[];
      files?: Amity.File<'image'>[];
    };

    type CommunityPayload = {
      communities: Amity.RawCommunity[];
      communityUsers?: Amity.Membership<'community'>[];
      categories?: Amity.Category[];
      feeds?: Amity.Feed[];
      users?: Amity.User[];
      files?: Amity.File[];
    };

    type CategoryPayload = {
      categories: Amity.Category[];
      files: Amity.File[];
    };

    type CommunityMembershipPayload = {
      communities: Amity.RawCommunity[];
      communityUsers: Amity.Membership<'community'>[];
      categories?: Amity.Category[];
      feeds?: Amity.Feed[];
      users: Amity.User[];
      files?: Amity.File[];
    };

    type PostPayload<T extends Amity.PostContentType = any> = {
      posts: Amity.Post<T>[];
      postChildren?: Amity.Post[];
      communities?: Amity.RawCommunity[];
      communityUsers?: Amity.Membership<'community'>[];
      categories?: Amity.Category[];
      comments?: Amity.Comment[];
      feeds?: Amity.Feed[];
      users?: Amity.User[];
      files?: Amity.File[];
    };

    type CommentPayload<T extends Amity.CommentContentType = any> = {
      comments: Amity.Comment<T>[];
      commentChildren?: Amity.Comment[];
      users?: Amity.User[];
      files?: Amity.File[];
    };

    type PollPayload = {
      users: Amity.User[];
      polls: Amity.Poll[];
    };

    type ReactionPayload = {
      reactions: Amity.ReactionQuery[];
      users: Pick<Amity.User, 'userId' | 'displayName' | 'metadata'>[];
    };

    type GlobalFeedPayload = Amity.PostPayload;

    type FollowStatusPayload = {
      follows: Amity.FollowStatus[];
    };

    type FollowInfoMePayload = {
      followCounts: Amity.FollowCount[];
    };

    type FollowersPayload = Amity.FollowStatusPayload & UserPayload;

    type FollowInfoPayload = FollowInfoMePayload & Amity.FollowStatusPayload;
  }
}
