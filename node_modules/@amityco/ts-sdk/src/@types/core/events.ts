/* eslint-disable camelcase */
import { IConnectPacket, IDisconnectPacket, IPublishPacket } from 'mqtt/dist/mqtt';

export {};

declare global {
  namespace Amity {
    type Listener<T = any> = (params: T) => void;

    type ObjectListener<T, K extends string[]> =
      | Listener<T>
      | ({
          onEvent?: (event: K[number], params: T) => void;
        } & {
          [P in K[number]]?: Listener<T>;
        });

    type Unsubscriber = () => void;

    type Subscriber<T = any> = (fn: Amity.Listener<T>) => Unsubscriber;

    type WsEvents = {
      disconnected: Amity.ErrorResponse | undefined;
      error: Amity.ErrorResponse | undefined;
      connect_error: Amity.ErrorResponse | undefined;
      reconnect_error: Amity.ErrorResponse | undefined;
      reconnect_failed: Amity.ErrorResponse | undefined;

      'v3.channel.didCreate': Amity.ChannelPayload;
      'v3.channel.didUpdate': Amity.ChannelPayload;
      'v3.channel.didDelete': Amity.ChannelPayload;
      'v3.channel.didJoin': Amity.ChannelPayload;
      'v3.channel.didLeave': Amity.ChannelPayload;
      'v3.channel.didAddUsers': Amity.ChannelMembershipPayload;
      'v3.channel.didRemoveUsers': Amity.ChannelMembershipPayload;
      'v3.channel.didBan': Amity.ChannelPayload;
      'v3.channel.didUnban': Amity.ChannelPayload;

      'v3.message.didFetch': Amity.MessagePayload;
      'v3.message.didCreate': Amity.MessagePayload;
      'v3.message.didUpdate': Amity.MessagePayload;
      'v3.message.didDelete': Amity.MessagePayload;

      'video-streaming.didRecord': Amity.StreamPayload;
      'video-streaming.didStart': Amity.StreamPayload;
      'video-streaming.didStop': Amity.StreamPayload;
    };

    type MqttEvents = {
      connect: IConnectPacket;
      message: [topic: string, payload: Buffer, packet: IPublishPacket];
      disconnect: IDisconnectPacket;
      error: Error;
      close: Error;
      end: undefined;
      reconnect: undefined;
    };

    type MqttCommunityUserMessageEvents = {
      'community.joined': Amity.CommunityMembershipPayload;
      'community.left': Amity.CommunityMembershipPayload;
      'community.userAdded': Amity.CommunityMembershipPayload;
      'community.userRemoved': Amity.CommunityMembershipPayload;
      'community.userBanned': Amity.CommunityMembershipPayload;
      'community.userUnbanned': Amity.CommunityMembershipPayload;
    };

    type MqttCommunityMessageEvents = {
      'community.created': Amity.CommunityPayload;
      'community.updated': Amity.CommunityPayload;
      'community.deleted': Amity.CommunityPayload;
    } & MqttCommunityUserMessageEvents;

    type MqttPostMessageEvents = {
      'post.created': Amity.PostPayload;
      'post.updated': Amity.PostPayload;
      'post.deleted': Amity.PostPayload;
      'post.approved': Amity.PostPayload;
      'post.declined': Amity.PostPayload;
      'post.flagged': Amity.PostPayload;
      'post.unflagged': Amity.PostPayload;
      'post.addReaction': Amity.PostPayload & { reactor: Amity.Reaction };
      'post.removeReaction': Amity.PostPayload & { reactor: Amity.Reaction };
    };

    type MqttCommentMessageEvents = {
      'comment.created': Amity.CommentPayload;
      'comment.updated': Amity.CommentPayload;
      'comment.deleted': Amity.CommentPayload;
      'comment.flagged': Amity.CommentPayload;
      'comment.unflagged': Amity.CommentPayload;
      'comment.addReaction': Amity.CommentPayload & { reactor: Amity.Reaction };
      'comment.removeReaction': Amity.CommentPayload & { reactor: Amity.Reaction };
    };

    type MqttUserMessageEvents = {
      'user.fetched': Amity.UserPayload;
      'user.updated': Amity.UserPayload;
      'user.deleted': Amity.UserPayload; // received from network topic
      'user.flagged': Amity.UserPayload;
      'user.unflagged': Amity.UserPayload;
      'user.flagCleared': Amity.UserPayload;
    };

    type MqttFollowMessageEvents = {
      'follow.created': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.requested': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.accepted': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.unfollowed': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.requestCanceled': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.requestDeclined': Amity.FollowersPayload | Amity.FollowStatusPayload;
      'follow.followerDeleted': Amity.FollowersPayload | Amity.FollowStatusPayload;
    };

    type MqttMessageEvents = MqttCommunityMessageEvents &
      MqttPostMessageEvents &
      MqttCommentMessageEvents &
      MqttUserMessageEvents &
      MqttFollowMessageEvents;

    type LocalEvents = {
      'poll.updated': Amity.PollPayload;
      'poll.deleted': Amity.PollPayload;
    };

    type Events = WsEvents & MqttEvents & MqttMessageEvents & LocalEvents;
  }
}
