import { AxiosInstance } from 'axios';
import { Emitter } from 'mitt';

declare global {
  namespace Amity {
    type Logger = (topic: string, ...args: any[]) => void;

    type Client = {
      version: string;

      log: Logger;
      http: AxiosInstance;
      mqtt: Amity.MqttClient;
      ws: SocketIOClient.Socket;
      emitter: Emitter<Amity.Events>;

      cache?: Amity.Cache;

      apiKey?: string;
      userId?: string;
      accessToken?: string;

      use: () => void;

      getFeedSettings: () => Promise<Amity.FeedSettings>;
    };

    type Device = {
      deviceId: string;
      deviceInfo: {
        version: string;
        kind: 'node' | 'web';
        model?: string;
      };
    };

    type Tokens = {
      accessToken: string;
      refreshToken: string;
    };

    type FeedSettings = {
      [name in Amity.ContentFeedType]?: Amity.ContentSetting[];
    };

    type ConnectClientParams = {
      userId: Amity.User['userId'];
      displayName?: Amity.User['displayName'];
      authToken?: string;
      deviceId?: Amity.Device['deviceId'];
    };

    type ConnectClientConfig = {
      disableRTE: boolean;
    };
  }
}
