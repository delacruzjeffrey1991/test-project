export const MessageContentType = Object.freeze({
  TEXT: 'text',
  IMAGE: 'image',
  FILE: 'file',
  VIDEO: 'video',
  AUDIO: 'audio',
  CUSTOM: 'custom',
});

declare global {
  namespace Amity {
    type MessageContentType = ValueOf<typeof MessageContentType>;

    type MessageContent<T extends Amity.MessageContentType = any> = {
      fileId: T extends 'file' | 'image' | 'video' | 'audio' ? string : null;
    };

    type MessageActionType = 'onCreate' | 'onUpdate' | 'onDelete' | 'onFetch';

    type Message<T extends Amity.MessageContentType = any> = {
      messageId: string;

      channelId: Amity.Channel['channelId'];
      userId: Amity.User['userId'];

      parentId?: Message['messageId'];
      childrenNumber: number;

      channelSegment: number;

      editedAt: Amity.timestamp;
    } & Amity.Content<T, 'type'> &
      Amity.MessageContent<T> &
      Amity.Metadata &
      Amity.Timestamps &
      Amity.SoftDelete &
      Amity.Taggable &
      Amity.Reactable &
      Amity.Mentionable<'user' | 'channel'>;

    type QueryMessages = {
      channelId: Amity.Channel['channelId'];
      type?: Amity.MessageContentType;
      parentId?: Amity.Message['parentId'];
      filterByParentId?: boolean;
      isDeleted?: boolean;
      tags?: Amity.Taggable['tags'];
      excludeTags?: Amity.Taggable['tags'];
      page?: Amity.Page;
    };

    type MessagesLiveCollection = Amity.LiveCollectionParams<Omit<QueryMessages, 'page'>>;

    type MessageLiveCollectionCache = Amity.LiveCollectionCache<
      Amity.Message['channelId'],
      Pick<QueryMessages, 'page'>
    >;
  }
}
