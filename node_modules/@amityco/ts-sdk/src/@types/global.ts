export {};

declare global {
  type Writeable<T> = { -readonly [P in keyof T]: T[P] };

  type Patch<T, K extends keyof T> = Partial<Pick<T, K>>;

  type Unwrap<T> = T extends Promise<infer U>
    ? U
    : T extends (...args: any) => Promise<infer U>
    ? U
    : T extends (...args: any) => infer U
    ? U
    : T;

  // eslint-disable-next-line @typescript-eslint/ban-types
  type ObjectKeys<T> = T extends object
    ? (keyof T)[]
    : T extends number
    ? []
    : T extends Array<any> | string
    ? string[]
    : never;

  interface ObjectConstructor {
    keys<T>(o: T): ObjectKeys<T>;
  }

  type ValueOf<T extends Record<any, any>> = T[keyof T];
}
