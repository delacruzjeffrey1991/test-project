import { getActiveClient } from '~/client/api/activeClient';

import { ingestInCache } from '~/cache/api/ingestInCache';
import { fireEvent } from '~/core/events';

import REFERENCE_TYPES from '../constants/referenceTypes';

/**
 * ```js
 * import { createReport } from '@amityco/ts-sdk'
 * const flagged = await createReport('post', postId)
 * ```
 *
 * @param referenceType The type of thing to add a report to, such as a post or a comment.
 * @param referenceId The ID of the thing to add a new report to.
 * @returns the created report result
 *
 * @category Report API
 * @async
 * */
export const createReport = async (
  referenceType: keyof typeof REFERENCE_TYPES,
  referenceId: string,
): Promise<boolean> => {
  const client = getActiveClient();
  client.log('report/createReport', { referenceType, referenceId });

  const { domainName } = REFERENCE_TYPES[referenceType];

  const { data } = await client.http.post<
    Amity.PostPayload | Amity.CommentPayload | Amity.MessagePayload | Amity.UserPayload
  >(
    `/api/${
      referenceType === 'user'
        ? `v4/me/flags/${encodeURIComponent(referenceId)}`
        : `v3/${domainName}/${encodeURIComponent(referenceId)}/flag`
    }`,
  );

  if (client.cache) ingestInCache(data);

  const event =
    referenceType === 'message'
      ? ('v3.message.didUpdate' as const)
      : (`${referenceType}.flagged` as const);

  fireEvent(event, data);

  return !!data;
};
