{
  "version": 3,
  "sources": ["../../../../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/react-intl-formatted-duration/dist/module.js", "dep:react-intl-formatted-duration"],
  "sourcesContent": ["import React from 'react';\nimport { injectIntl } from 'react-intl';\nimport intlMessageformat from 'intl-messageformat';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar IntlMessageFormat = _interopDefault(intlMessageformat);\n\nconst INITIAL_ZERO = /^0/;\n\nfunction leftTrim(parts) {\n  let previousEmpty = true;\n  return parts.filter(token => {\n    if (token.type === 'literal' && !token.value.trim()) {\n      if (previousEmpty) return false;\n      previousEmpty = true;\n      return true;\n    } else {\n      previousEmpty = false;\n    }\n\n    return true;\n  });\n}\n\nfunction trim(parts, trimFirstPaddedValue = false) {\n  const trimmed = leftTrim(leftTrim(parts).reverse()).reverse();\n\n  if (trimFirstPaddedValue) {\n    const first = trimmed.find(token => token.type !== 'literal');\n    first.value = first.value.replace(INITIAL_ZERO, '');\n  }\n\n  return trimmed;\n}\n\nfunction DurationUnitFormat(locales, options = defaultOptions) {\n  this.locales = locales; // TODO I'm ignoring the unit for now, value is always expressed in seconds\n\n  this.unit = 'second'; // .style determines how the placeholders are converted to plain text\n\n  this.style = options.style || DurationUnitFormat.styles.LONG; // .isTimer determines some special behaviour, we want to keep the 0s\n\n  this.isTimer = this.style === DurationUnitFormat.styles.TIMER; // .format used `seconds`, `minutes`, `hours`, ... as placeholders\n\n  this.format = options.format || (this.isTimer ? '{minutes}:{seconds}' : '{seconds}'); // How to format unit according to style\n\n  this.formatUnits = options.formatUnits || defaultOptions.formatUnits; // .formatDuration determines whether we use a space or not\n\n  this.formatDuration = options.formatDuration || defaultOptions.formatDuration;\n  this.shouldRound = options.round === true;\n}\n\nDurationUnitFormat.units = {\n  DAY: 'day',\n  HOUR: 'hour',\n  MINUTE: 'minute',\n  SECOND: 'second'\n};\nDurationUnitFormat.styles = {\n  CUSTOM: 'custom',\n  TIMER: 'timer',\n  // http://www.unicode.org/cldr/charts/27/summary/pl.html#5556\n  LONG: 'long',\n  SHORT: 'short',\n  NARROW: 'narrow'\n};\n\nDurationUnitFormat.prototype.formatToParts = function (value) {\n  // Extract all the parts that are actually used from the localised format\n  const parts = new IntlMessageFormat(this.format, this.locales).formatToParts({\n    second: {\n      unit: DurationUnitFormat.units.SECOND\n    },\n    seconds: {\n      unit: DurationUnitFormat.units.SECOND\n    },\n    minute: {\n      unit: DurationUnitFormat.units.MINUTE\n    },\n    minutes: {\n      unit: DurationUnitFormat.units.MINUTE\n    },\n    hour: {\n      unit: DurationUnitFormat.units.HOUR\n    },\n    hours: {\n      unit: DurationUnitFormat.units.HOUR\n    },\n    day: {\n      unit: DurationUnitFormat.units.DAY\n    },\n    days: {\n      unit: DurationUnitFormat.units.DAY\n    }\n  }); // Compute the value of each bucket depending on which parts are used\n\n  const buckets = splitSecondsInBuckets(value, this.unit, parts, this.shouldRound); // Each part from the format message could potentially contain multiple parts\n\n  const result = parts.reduce((all, token) => all.concat(this._formatToken(token, buckets)), []);\n  return this._trimOutput(result, parts);\n};\n\nDurationUnitFormat.prototype._formatToken = function (token, buckets) {\n  const {\n    value\n  } = token;\n\n  if (value.unit) {\n    const number = buckets[value.unit];\n    return number || this.isTimer ? this._formatDurationToParts(value.unit, number) : [];\n  } else if (value) {\n    // If there is no .unit it's text, but it could be an empty string\n    return [{\n      type: 'literal',\n      value\n    }];\n  }\n\n  return [];\n};\n\nDurationUnitFormat.prototype._formatDurationToParts = function (unit, number) {\n  if (this.isTimer) {\n    // With timer style, we only show the value\n    return [{\n      type: unit,\n      value: this._formatValue(number)\n    }];\n  } else if (isSpecialStyle(this.style)) {\n    return new Intl.NumberFormat(this.locales, {\n      style: 'unit',\n      unit: unit,\n      unitDisplay: this.style\n    }).formatToParts(number).map(_ => ({\n      // NumberFormat uses 'integer' for types, but I prefer using the unit\n      // This is more similar to what happens in DateTimeFormat\n      type: _.type === 'integer' ? unit : _.type,\n      value: _.value\n    }));\n  } // This is now only needed for the custom formatting\n\n\n  return this.formatDuration.split(SPLIT_POINTS).map(text => {\n    if (text === '{value}') {\n      return {\n        type: unit,\n        value: this._formatValue(number)\n      };\n    }\n\n    if (text === '{unit}') {\n      const message = this.formatUnits[unit] || '{value}';\n      const formattedUnit = new IntlMessageFormat(message, this.locales).format({\n        value: number\n      });\n      return {\n        type: 'unit',\n        value: formattedUnit\n      };\n    }\n\n    if (text) {\n      return {\n        type: 'literal',\n        value: text\n      };\n    }\n  }).filter(Boolean);\n};\n\nDurationUnitFormat.prototype._formatValue = function (number) {\n  return this.isTimer ? number.toString().padStart(2, '0') : number.toString();\n};\n\nDurationUnitFormat.prototype._trimOutput = function (result, parts) {\n  const trimmed = trim(result, this.isTimer);\n\n  if (!trimmed.find(_ => _.type !== 'literal')) {\n    // if everything cancels out and there are only literals,\n    // then return 0 on the lowest available unit\n    const minUnit = [DurationUnitFormat.units.SECOND, DurationUnitFormat.units.MINUTE, DurationUnitFormat.units.HOUR, DurationUnitFormat.units.DAY].find(unit => has(parts, unit));\n    return this._formatDurationToParts(minUnit, 0);\n  }\n\n  return trimmed;\n};\n\nconst defaultOptions = {\n  // unit: DurationUnitFormat.units.SECOND,\n  formatDuration: '{value} {unit}',\n  formatUnits: {\n    // custom values\n    [DurationUnitFormat.units.DAY]: '{value, plural, one {day} other {days}}',\n    [DurationUnitFormat.units.HOUR]: '{value, plural, one {hour} other {hours}}',\n    [DurationUnitFormat.units.MINUTE]: '{value, plural, one {minute} other {minutes}}',\n    [DurationUnitFormat.units.SECOND]: '{value, plural, one {second} other {seconds}}'\n  },\n  style: DurationUnitFormat.styles.LONG\n};\nconst SPLIT_POINTS = /(\\{value\\}|\\{unit\\})/;\nconst SECONDS_IN = {\n  day: 24 * 60 * 60,\n  hour: 60 * 60,\n  minute: 60,\n  second: 1\n};\n\nfunction has(parts, unit) {\n  return !!parts.find(_ => _.value.unit === unit);\n}\n\nfunction splitSecondsInBuckets(value, valueUnit, parts, shouldRound) {\n  let seconds = value * SECONDS_IN[valueUnit]; // Rounding will only affect the lowest unit\n  // check how many seconds we need to add\n\n  if (shouldRound) {\n    const lowestUnit = [DurationUnitFormat.units.SECOND, DurationUnitFormat.units.MINUTE, DurationUnitFormat.units.HOUR, DurationUnitFormat.units.DAY].find(unit => has(parts, unit)); // These many seconds will be ignored by the lowest unit\n\n    const remainder = seconds % SECONDS_IN[lowestUnit];\n\n    if (2 * remainder >= SECONDS_IN[lowestUnit]) {\n      // The remainder is large, add enough seconds to increse the lowest unit\n      seconds += SECONDS_IN[lowestUnit] - remainder;\n    }\n  }\n\n  const buckets = {};\n  [DurationUnitFormat.units.DAY, DurationUnitFormat.units.HOUR, DurationUnitFormat.units.MINUTE, DurationUnitFormat.units.SECOND].forEach(unit => {\n    if (has(parts, unit)) {\n      buckets[unit] = Math.floor(seconds / SECONDS_IN[unit]);\n      seconds -= buckets[unit] * SECONDS_IN[unit];\n    }\n  });\n  return buckets;\n}\n\nfunction isSpecialStyle(style) {\n  return [DurationUnitFormat.styles.LONG, DurationUnitFormat.styles.SHORT, DurationUnitFormat.styles.NARROW].includes(style);\n}\n\nvar durationUnitFormat_cjs = DurationUnitFormat;\n\nvar EXTENDED_FORMAT = 'EXTENDED_FORMAT';\nvar TIMER_FORMAT = 'TIMER_FORMAT';\n\nfunction DurationMessage(_ref) {\n  var _formatUnits;\n\n  var intl = _ref.intl,\n      seconds = _ref.seconds,\n      format = _ref.format,\n      textComponent = _ref.textComponent,\n      unitDisplay = _ref.unitDisplay,\n      valueComponent = _ref.valueComponent,\n      otherProps = _objectWithoutProperties(_ref, [\"intl\", \"seconds\", \"format\", \"textComponent\", \"unitDisplay\", \"valueComponent\"]);\n\n  var actualFormat = intl.messages[\"react-intl-formatted-duration/custom-format/\".concat(format || '')] || format;\n\n  if (!format || format === EXTENDED_FORMAT) {\n    actualFormat = intl.messages['react-intl-formatted-duration.longFormatting'] || '{minutes} {seconds}';\n  }\n\n  if (format === TIMER_FORMAT) {\n    actualFormat = intl.messages['react-intl-formatted-duration.timerFormatting'] || '{minutes}:{seconds}';\n  }\n\n  var actualSytle = unitDisplay;\n\n  if (!actualSytle) {\n    actualSytle = format === TIMER_FORMAT ? durationUnitFormat_cjs.styles.TIMER : durationUnitFormat_cjs.styles.CUSTOM;\n  }\n\n  var parts = new durationUnitFormat_cjs(intl.locale, {\n    format: actualFormat,\n    formatUnits: (_formatUnits = {}, _defineProperty(_formatUnits, durationUnitFormat_cjs.units.DAY, intl.messages['react-intl-formatted-duration.daysUnit'] || '{value, plural, one {day} other {days}}'), _defineProperty(_formatUnits, durationUnitFormat_cjs.units.HOUR, intl.messages['react-intl-formatted-duration.hoursUnit'] || '{value, plural, one {hour} other {hours}}'), _defineProperty(_formatUnits, durationUnitFormat_cjs.units.MINUTE, intl.messages['react-intl-formatted-duration.minutesUnit'] || '{value, plural, one {minute} other {minutes}}'), _defineProperty(_formatUnits, durationUnitFormat_cjs.units.SECOND, intl.messages['react-intl-formatted-duration.secondsUnit'] || '{value, plural, one {second} other {seconds}}'), _formatUnits),\n    formatDuration: intl.messages['react-intl-formatted-duration.duration'] || '{value} {unit}',\n    round: true,\n    // TODO backward compatible, add a prop to configure it\n    style: actualSytle\n  }).formatToParts(seconds);\n  var Text = textComponent || intl.textComponent;\n  var Value = valueComponent || textComponent || intl.textComponent;\n  return React.createElement(Text, otherProps, parts.map(function (token) {\n    if (token.type === 'literal' || token.type === 'unit') return token.value;\n    return React.createElement(Value, {\n      key: token.type\n    }, token.value);\n  }));\n}\n\nvar index = injectIntl(DurationMessage);\n\nexport default index;\nexport { EXTENDED_FORMAT, TIMER_FORMAT };\n", "import d from \"../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/react-intl-formatted-duration/dist/module.js\";export default d;\nexport * from \"../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/react-intl-formatted-duration/dist/module.js\""],
  "mappings": "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",
  "names": ["React"]
}
