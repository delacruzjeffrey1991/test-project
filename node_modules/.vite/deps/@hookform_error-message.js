import {
  require_react
} from "./chunk-NNCIWRE5.js";
import {
  __toESM
} from "./chunk-CWJMTW5E.js";

// ../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/@hookform/error-message/dist/index.esm.js
var e = __toESM(require_react());

// ../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/react-hook-form/dist/index.esm.mjs
var import_react = __toESM(require_react(), 1);
var isDateObject = (value) => value instanceof Date;
var isNullOrUndefined = (value) => value == null;
var isObjectType = (value) => typeof value === "object";
var isObject = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value);
var compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];
var isUndefined = (val) => val === void 0;
var get = (obj, path, defaultValue) => {
  if (!path || !isObject(obj)) {
    return defaultValue;
  }
  const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], obj);
  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;
};
var VALIDATION_MODE = {
  onBlur: "onBlur",
  onChange: "onChange",
  onSubmit: "onSubmit",
  onTouched: "onTouched",
  all: "all"
};
var HookFormContext = import_react.default.createContext(null);
var useFormContext = () => import_react.default.useContext(HookFormContext);
var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
var defaultOptions = {
  mode: VALIDATION_MODE.onSubmit,
  reValidateMode: VALIDATION_MODE.onChange,
  shouldFocusError: true
};

// ../Amity-Social-Cloud-UIKit-Web-OpenSource/node_modules/@hookform/error-message/dist/index.esm.js
var s = function(s2) {
  var t = s2.as, a = s2.errors, m = s2.name, o = s2.message, i = s2.render, l = function(e2, r) {
    if (null == e2)
      return {};
    var n, s3, t2 = {}, a2 = Object.keys(e2);
    for (s3 = 0; s3 < a2.length; s3++)
      r.indexOf(n = a2[s3]) >= 0 || (t2[n] = e2[n]);
    return t2;
  }(s2, ["as", "errors", "name", "message", "render"]), f = useFormContext(), c = get(a || f.formState.errors, m);
  if (!c)
    return null;
  var g = c.message, u = c.types, d = Object.assign({}, l, { children: g || o });
  return e.isValidElement(t) ? e.cloneElement(t, d) : i ? i({ message: g || o, messages: u }) : e.createElement(t || e.Fragment, d);
};
export {
  s as ErrorMessage
};
//# sourceMappingURL=@hookform_error-message.js.map
